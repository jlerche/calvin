/*
 * Copyright 2019 Marco Helmich
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto3";

package pb;

// raft proto also pulls this in
// make sure we import it the same way as raft does
import "gogoproto/gogo.proto";
import "go.etcd.io/etcd/raft/raftpb/raft.proto";

option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;
option (gogoproto.goproto_getters_all) = false;
option (gogoproto.goproto_enum_prefix_all) = false;

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR TRANSACTIONS

message SimpleSetterArg {
  bytes Key = 1;
  bytes Value = 2;
}

message Id128 {
  option (gogoproto.equal) = true;
  option (gogoproto.compare) = true;

  uint64 Upper = 1;
  uint64 Lower = 2;
}

enum MessageType {
  TRANSACTION = 0;
  LOW_ISO_READ = 1;
}

// EXPERIMENTAL
message BaseMessage {
 MessageType Type = 1;
}

message Transaction {
  option (gogoproto.equal) = true;
  option (gogoproto.compare) = true;

  MessageType Type = 1;
  Id128 Id = 2;
  // keys of the data objects that are being accessed
  repeated bytes ReadSet = 3;
  repeated bytes ReadWriteSet = 4;

  // ids of the nodes that are being contacted
  repeated uint64 ReaderNodes = 5;
  repeated uint64 WriterNodes = 6;

  // the stored procedure that's being invoked
  string StoredProcedure = 7;
  repeated bytes StoredProcedureArgs = 8;

  // only true when the transaction is a low isolation read
  // in that case LowIsolationReadResponse is populated by the execution routines
  // a nifty way to get this info from the execution back to the scheduler
  bool IsLowIsolationRead = 9;
  LowIsolationReadResponse LowIsolationReadResponse = 10;
}

message LowIsoRead {
  MessageType Type = 1;
  LowIsolationReadResponse LowIsolationReadResponse = 2;
}

message TransactionBatch {
  repeated Transaction transactions = 1;
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR SCHEDULER SERVICE

message LowIsolationReadRequest {
  repeated bytes Keys = 1;
}

message LowIsolationReadResponse {
  option (gogoproto.equal) = true;
  option (gogoproto.compare) = true;

  repeated bytes Keys = 1;
  repeated bytes Values = 2;
  uint64 Term = 3;
  uint64 Index = 4;
}

service LowIsolationRead {
  rpc LowIsolationRead(LowIsolationReadRequest) returns (LowIsolationReadResponse) {}
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR REMOTE READS

message RemoteReadRequest {
  Id128 TxnId = 1;
  repeated bytes Keys = 2;
  repeated bytes Values = 3;
  uint32 TotalNumLocks = 4;
}

message RemoteReadResponse {
  string Error = 1;
}

service RemoteRead {
  rpc RemoteRead(RemoteReadRequest) returns (RemoteReadResponse) {}
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR THE RAFT TRANSPORT

message RaftPeer {
  uint64 RaftNodeId = 1;
  string PeerAddress = 2;
}

service RaftTransport {
  rpc StepStream(stream StepRequest) returns (stream StepResponse) {}
}

message StepRequest {
  uint64 RaftNodeId = 1;
  raftpb.Message Message = 2;
}

message StepResponse {
  string Error = 1;
}

// This is used by the implmentor of the data store!
// Be mindful of that.
message PartitionedSnapshot {
  repeated uint64 PartitionIDs = 1;
  repeated bytes Snapshots = 2;
}

//////////////////////////////////////////
////////////////////////////////
// SECTION FOR CALVIN

message SubmitTransactionRequest {}

message SubmitTransactionResponse {}

service Calvin {
  rpc SubmitTransaction(SubmitTransactionRequest) returns (SubmitTransactionResponse) {}
}
